{"mappings":"oeAAA,IAAAA,EAAAC,EAAA,SA6CA,SAASC,EAAcC,EAAUC,GAC/B,MAAMC,EAAgBC,KAAKC,SAAW,GACtC,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3BC,YAAW,KACLN,EACFI,EAAQ,C,SAAEN,E,MAAUC,IAEpBM,EAAS,C,SAAEP,E,MAAUC,MAEtBA,OAnDM,CACXQ,KAAMC,SAASC,cAAc,WAS1BF,KAAKG,iBAAiB,UAE3B,SAAkBC,GAChBA,EAAEC,iBAEF,MAAMC,EAAeF,EAAEG,OAAOC,SAASC,OAAOC,MAC9C,IAAIC,EAAaC,OAAOR,EAAEG,OAAOC,SAAShB,MAAMkB,OAChD,MAAMG,EAAOD,OAAOR,EAAEG,OAAOC,SAASK,KAAKH,QAK7C,SAAqBI,EAAiBC,EAAWC,GAS/C,IARA1B,EAAc,EAAGwB,GACdG,MAAK,EAAC1B,SAAEA,EAAQC,MAAEA,MACjBJ,EAAA8B,OAAOC,QAAQ,uBAAqB5B,QAAiBC,UAEtD4B,OAAM,EAAC7B,SAAEA,EAAQC,MAAEA,MAClBJ,EAAA8B,OAAOG,QAAQ,sBAAoB9B,QAAiBC,UAGnD8B,EAAI,EAAGA,GAAKN,EAAaM,GAAK,EACjChC,EAAcgC,EAAIR,GAAmBC,GAClCE,MAAK,EAAC1B,SAAEA,EAAQC,MAAEA,MACjBJ,EAAA8B,OAAOC,QAAQ,uBAAqB5B,QAAiBC,UAEtD4B,OAAM,EAAC7B,SAAEA,EAAQC,MAAEA,MAClBJ,EAAA8B,OAAOG,QAAQ,sBAAoB9B,QAAeC,UAlBxD+B,CAAYZ,EAAYE,EAAMP","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\nimport 'notiflix/dist/notiflix-3.2.5.min.css';\n\nconst refs = {\n  form: document.querySelector('.form'),\n  // btnSubmit: document.querySelector('[type=submit]'),\n  // firstDelayField: document.querySelector('[name=delay]'),\n  // delayStepField: document.querySelector('[name=step]'),\n  // amountField: document.querySelector('[name=amount]'),\n};\n\nlet intervalId = null;\n\nrefs.form.addEventListener('submit', onSubmit);\n\nfunction onSubmit(e) {\n  e.preventDefault();\n\n  const repeatNumber = e.target.elements.amount.value;\n  let firstDelay = Number(e.target.elements.delay.value);\n  const step = Number(e.target.elements.step.value);\n\n  callPromise(firstDelay, step, repeatNumber);\n}\n\nfunction callPromise(firstDelayValue, stepValue, numberValue) {\n  createPromise(1, firstDelayValue)\n    .then(({ position, delay }) => {\n      Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n    })\n    .catch(({ position, delay }) => {\n      Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n    });\n\n  for (i = 2; i <= numberValue; i += 1) {\n    createPromise(i, (firstDelayValue += stepValue))\n      .then(({ position, delay }) => {\n        Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n  }\n}\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  return new Promise((resolve, rejected) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        rejected({ position, delay });\n      }\n    }, delay);\n  });\n}\n"],"names":["$iQIUW","parcelRequire","$47d4ff9957288465$var$createPromise","position","delay","shouldResolve","Math","random","Promise","resolve","rejected","setTimeout","form","document","querySelector","addEventListener","e","preventDefault","repeatNumber","target","elements","amount","value","firstDelay","Number","step","firstDelayValue","stepValue","numberValue","then","Notify","success","catch","failure","i","$47d4ff9957288465$var$callPromise"],"version":3,"file":"03-promises.a5cb43e7.js.map"}